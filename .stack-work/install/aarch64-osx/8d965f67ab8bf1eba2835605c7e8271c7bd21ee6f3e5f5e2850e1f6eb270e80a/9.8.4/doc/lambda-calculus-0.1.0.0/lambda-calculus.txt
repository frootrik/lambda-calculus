-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package lambda-calculus
@version 0.1.0.0


-- | This module defines the representation of lambda calculus expressions,
--   including support for distinguishing free and bound variables, monadic
--   substitution, and pretty-printing using the <tt>prettyprinter</tt>
--   library.
module LambdaAST

-- | A variable in a lambda expression, either bound or free.
--   
--   <a>Bound</a> represents a variable that is bound by a lambda
--   abstraction. 'Free a' represents a free variable identified by some
--   name or value of type <tt>a</tt>.
data Variable a
Bound :: Variable a
Free :: a -> Variable a

-- | The abstract syntax tree for lambda calculus terms.
--   
--   Parameterized by the type of variables (e.g., <a>String</a> or
--   'Variable a').
--   
--   Constructors:
--   
--   <ul>
--   <li><a>Var</a> — A variable, either bound or free.</li>
--   <li><a>App</a> — Function application: <tt>(f x)</tt></li>
--   <li><a>LamAbs</a> — Lambda abstraction: <tt>λx. body</tt></li>
--   </ul>
--   
--   In <a>LamAbs</a>, the bound variable is named (for pretty-printing),
--   but the body uses 'Variable var' to distinguish bound from free
--   variables.
data Lambda var
Var :: var -> Lambda var
App :: Lambda var -> Lambda var -> Lambda var
LamAbs :: String -> Lambda (Variable var) -> Lambda var

-- | Smart constructor for lambda abstractions.
--   
--   Takes a variable name and a body term with plain <a>String</a>
--   variables, and returns a <a>Lambda</a> expression where the named
--   variable is replaced with <a>Bound</a> inside the body, and all other
--   variables become <a>Free</a>.
--   
--   This is what transforms a 'Lambda String' into a scoped 'Lambda
--   (Variable String)'.
lam :: String -> Lambda String -> Lambda String

-- | Pretty-prints a lambda expression using a user-supplied printer for
--   variables.
--   
--   Free variables are printed via the given function <tt>p :: a -&gt; Doc
--   ann</tt>. Bound variables are printed by the variable name captured in
--   the nearest <a>LamAbs</a>.
prettyLambda :: (a -> Doc ann) -> Lambda a -> Doc ann

-- | Renders a lambda expression as a human-readable string using
--   <a>prettyLambda</a>.
--   
--   This is the default printer that uses <a>String</a> variables.
renderLambda :: Lambda String -> String
instance GHC.Base.Applicative LambdaAST.Lambda
instance GHC.Base.Applicative LambdaAST.Variable
instance GHC.Classes.Eq var => GHC.Classes.Eq (LambdaAST.Lambda var)
instance GHC.Classes.Eq a => GHC.Classes.Eq (LambdaAST.Variable a)
instance Data.Foldable.Foldable LambdaAST.Lambda
instance Data.Foldable.Foldable LambdaAST.Variable
instance GHC.Base.Functor LambdaAST.Lambda
instance GHC.Base.Functor LambdaAST.Variable
instance GHC.Base.Monad LambdaAST.Lambda
instance GHC.Base.Monad LambdaAST.Variable
instance GHC.Show.Show var => GHC.Show.Show (LambdaAST.Lambda var)
instance GHC.Show.Show a => GHC.Show.Show (LambdaAST.Variable a)
instance Data.Traversable.Traversable LambdaAST.Lambda
instance Data.Traversable.Traversable LambdaAST.Variable


-- | for lambda calculus expressions. This module defines the evaluation
--   semantics for the Lambda AST using monadic substitution.
module Evaluator

-- | Performs β-reduction by substituting the argument expression for the
--   bound variable in the body of a lambda abstraction.
--   
--   The body must be of type <tt>Lambda (Variable a)</tt>, where bound
--   variables are marked with <tt>Bound</tt> and free variables with
--   <tt>Free a</tt>.
--   
--   The argument is substituted wherever <tt>Bound</tt> appears.
subst :: Lambda (Variable a) -> Lambda a -> Lambda a

-- | Performs a single evaluation step of β-reduction.
--   
--   If the expression is an application of a lambda abstraction to an
--   argument, it reduces by substitution. Otherwise, it tries to reduce
--   either the function or the argument recursively.
--   
--   Returns <tt>Nothing</tt> if the expression is in normal form.
step :: Lambda a -> Maybe (Lambda a)

-- | Produces a list of successive evaluation steps from the input
--   expression to its normal form.
--   
--   Each element in the list represents the expression at a stage of
--   evaluation. The final element is the expression in normal form.
traceSteps :: Lambda a -> [Lambda a]

-- | Normalizes a lambda expression by repeatedly applying <a>step</a>
--   until no further reductions can be made.
--   
--   Returns the expression in normal form.
eval :: Lambda a -> Lambda a


-- | This module defines parsers for lambda expressions, including
--   variables, abstractions, and applications. The resulting expressions
--   are represented using the Lambda AST defined in <tt>LambdaAST</tt>.
module Parser

-- | Parses any lambda calculus expression, trying abstraction,
--   application, parenthesized expressions, or variables in order.
--   
--   Returns a raw 'Lambda String' term (unscoped).
parseLambda :: Parser (Lambda String)

-- | Top-level parser that consumes the entire input string.
--   
--   It parses a lambda expression and ensures no remaining input is left.
--   Returns either a parse error or the parsed 'Lambda String' expression.
topParser :: String -> Either (ParseErrorBundle String Void) (Lambda String)
